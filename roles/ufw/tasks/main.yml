---
- name: Install UFW
  ansible.builtin.apt:
    name: ufw
    state: present

- name: Reset UFW
  community.general.ufw:
    state: reset

- name: Set default policies
  community.general.ufw:
    direction: "{{ item.direction }}"
    policy: "{{ item.policy }}"
  loop:
    - { direction: 'incoming', policy: 'deny' }
    - { direction: 'outgoing', policy: 'allow' }

- name: Check if K3s is installed
  ansible.builtin.stat:
    path: /usr/local/bin/k3s
  register: k3s_binary

- name: Check if K3s service is running
  ansible.builtin.service_facts:
  register: service_state

# Ensure that UFW doesn't interfere with K3s iptables rules
- name: Configure UFW to allow iptables forwarding
  ansible.builtin.lineinfile:
    path: /etc/default/ufw
    regexp: '^DEFAULT_FORWARD_POLICY'
    line: 'DEFAULT_FORWARD_POLICY="ACCEPT"'
  when: >
    k3s_binary.stat.exists or 
    ('k3s.service' in service_state.ansible_facts.services and 
     service_state.ansible_facts.services['k3s.service'].state == 'running')

# Ensure that UFW doesn't filter forwarded packets (let K3s handle them)
- name: Configure UFW to not filter forwarded packets
  ansible.builtin.lineinfile:
    path: /etc/ufw/sysctl.conf
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  loop:
    - { regexp: '^net/ipv4/ip_forward', line: 'net/ipv4/ip_forward=1' }
    - { regexp: '^net/ipv6/conf/default/forwarding', line: 'net/ipv6/conf/default/forwarding=1' }
    - { regexp: '^net/ipv6/conf/all/forwarding', line: 'net/ipv6/conf/all/forwarding=1' }
  when: >
    k3s_binary.stat.exists or 
    ('k3s.service' in service_state.ansible_facts.services and 
     service_state.ansible_facts.services['k3s.service'].state == 'running')

- name: Allow all traffic between Kubernetes cluster hosts
  community.general.ufw:
    rule: allow
    from_ip: "{{ hostvars[item]['ansible_default_ipv4']['address'] | default(hostvars[item]['ansible_host']) }}"
  with_items: "{{ groups['s54-k3s'] | default([]) }}"
  when: >
    (k3s_binary.stat.exists or 
    ('k3s.service' in service_state.ansible_facts.services and 
     service_state.ansible_facts.services['k3s.service'].state == 'running')) and
    groups['s54-k3s'] is defined and groups['s54-k3s'] | length > 0

- name: Allow all traffic on container network interfaces
  community.general.ufw:
    rule: allow
    interface: "{{ item }}"
    direction: in
  loop:
    - "cni0"
    - "flannel.1"
    - "cilium+"
    - "vxlan.calico"
    - "tunl0"
    - "kube-bridge"
    - "kube-ipvs0"
    - "nodelocaldns"
    - "vxlan-v4578"
  failed_when: false  # Skip if interface doesn't exist
  when: >
    k3s_binary.stat.exists or 
    ('k3s.service' in service_state.ansible_facts.services and 
     service_state.ansible_facts.services['k3s.service'].state == 'running')

- name: Allow K3s Pod and Service network traffic (including blocked ports for internal communication)
  community.general.ufw:
    rule: allow
    from_ip: "{{ item }}"
  loop:
    - "{{ k3s_pod_network | default('10.42.0.0/16') }}"     # pods
    - "{{ k3s_service_network | default('10.43.0.0/16') }}" # services
  when: >
    k3s_binary.stat.exists or 
    ('k3s.service' in service_state.ansible_facts.services and 
     service_state.ansible_facts.services['k3s.service'].state == 'running')
     
# Now block specific ports for external access
- name: Block specific ports for external access (but not for internal K8s traffic)
  community.general.ufw:
    rule: deny
    port: "{{ item }}"
  loop: "{{ ufw_blocked_ports | default([]) }}"
  when: ufw_blocked_ports is defined and ufw_blocked_ports | length > 0

- name: Allow Calico overlay network traffic
  community.general.ufw:
    rule: allow
    proto: "{{ item.proto }}"
    port: "{{ item.port | default('') }}"
  loop:
    - { proto: 'udp', port: '4789' }  # VXLAN (Calico/Flannel)
    - { proto: 'tcp', port: '179' }   # BGP (Calico)
    - { proto: 'udp', port: '8472' }  # Flannel
    - { proto: 'esp' }                # IPsec
    - { proto: 'ah' }                 # IPsec
    - { proto: 'udp', port: '500' }   # IPsec
    - { proto: 'udp', port: '4500' }  # IPsec NAT-T
  when: >
    k3s_binary.stat.exists or 
    ('k3s.service' in service_state.ansible_facts.services and 
     service_state.ansible_facts.services['k3s.service'].state == 'running')

- name: Configure UFW rules for predefined groups
  ansible.builtin.include_tasks: configure_port_group.yml
  loop: "{{ ufw_port_groups | default([]) }}"
  loop_control:
    loop_var: port_group

- name: Allow UDP protocol on ports used by Kubernetes services
  community.general.ufw:
    rule: allow
    proto: udp
    port: "{{ item }}"
  loop:
    - "53"
    - "8472"
    - "4789"
  when: >
    k3s_binary.stat.exists or 
    ('k3s.service' in service_state.ansible_facts.services and 
     service_state.ansible_facts.services['k3s.service'].state == 'running')

- name: Allow home network access (all ports except those explicitly blocked above)
  community.general.ufw:
    rule: allow
    from_ip: "{{ ufw_home_network | default('10.64.32.0/24') }}"
  when: ufw_allow_home_network | default(true)

- name: Enable UFW
  community.general.ufw:
    state: enabled 