---
# 1) snapd & vmagent (Snap)
- name: Ensure snapd is installed
  ansible.builtin.apt:
    name: snapd
    state: present
    update_cache: true
  when: ansible_architecture != "aarch64"

- name: Ensure vmagent snap is installed
  community.general.snap:
    name: "{{ vmagent_snap_name }}"
    state: present
    channel: "{{ vmagent_snap_channel }}"
  when: ansible_architecture != "aarch64"

# Falls der Snap-eigene Dienst existiert, stoppen/disable (wir nutzen eigene Unit)
- name: Disable snap vmagent service if present
  ansible.builtin.service:
    name: "snap.{{ vmagent_snap_name }}.vmagent.service"
    state: stopped
    enabled: false
  ignore_errors: true
  when: ansible_architecture != "aarch64"

- name: Download vmagent binary (arm64)
  ansible.builtin.get_url:
    url: "{{ vmagent_arm64_url }}"
    dest: /tmp/vmagent.tar.gz
    mode: '0644'
  when: ansible_architecture == "aarch64"

- name: Extract vmagent binary (arm64)
  ansible.builtin.unarchive:
    src: /tmp/vmagent.tar.gz
    dest: /opt/vmagent/
    remote_src: yes
    extra_opts: [--strip-components=1]
  when: ansible_architecture == "aarch64"

- name: Ensure vmagent binary is executable (arm64)
  ansible.builtin.file:
    path: /opt/vmagent/vmagent-prod
    mode: '0755'
    state: file
  when: ansible_architecture == "aarch64"

- name: Adjust vmagent binary path for arm64
  set_fact:
      vmagent_binary_path: "/opt/vmagent/vmagent-prod"
  when: ansible_architecture == "aarch64"

# 2) Config-Dateien
- name: Ensure config dir exists
  ansible.builtin.file:
    path: /etc/vmagent
    state: directory
    mode: "0755"

- name: Generate ICMP targets with individual labels from inventory for Blackbox Exporter
  ansible.builtin.set_fact:
    blackbox_icmp_targets: >-
      {%- set targets = [] -%}
      {%- for host in groups['debian-based'] -%}
        {%- set target_obj = {
          'target': hostvars[host]['external_fqdn'] | default(hostvars[host]['inventory_hostname']),
          'labels': {
            'server_group': hostvars[host]['server_group'] | default('unknown')
          }
        } -%}
        {%- set _ = targets.append(target_obj) -%}
      {%- endfor -%}
      {{ targets | unique }}
  run_once: true
  delegate_to: "{{ inventory_hostname }}"


- name: Render scrape config (60s, lokale Exporter)
  ansible.builtin.template:
    src: scrape.yml.j2
    dest: /etc/vmagent/scrape.yml
    mode: "0644"
  notify: Restart vmagent

- name: Render remote env (user/pass/url & label)
  ansible.builtin.template:
    src: remote.env.j2
    dest: /etc/vmagent/remote.env
    mode: "0600"
  notify: Restart vmagent

# 3) Systemd-Unit (ruft den Snap-Wrapper auf)
- name: Install vmagent systemd unit
  ansible.builtin.template:
    src: vmagent.service.j2
    dest: /etc/systemd/system/vmagent.service
    mode: "0644"
  notify: Daemon reload

- name: Ensure buffer dir exists
  ansible.builtin.file:
    path: /var/lib/vmagent
    state: directory
    mode: "0755"

# 4) Start
- name: Enable and start vmagent
  ansible.builtin.systemd:
    name: vmagent
    state: started
    enabled: true
