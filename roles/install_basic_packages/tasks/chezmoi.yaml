---
# Chezmoi installation and setup
- name: Check if chezmoi is already installed
  ansible.builtin.stat:
    path: "{{ chezmoi_bin_path }}"
  register: chezmoi_binary
  become: true
  when: chezmoi_install | bool

- name: Get GLIBC version
  ansible.builtin.shell: ldd --version | head -n 1 | grep -oP '\d+\.\d+$'
  register: glibc_version
  changed_when: false
  when: 
    - chezmoi_install | bool
    - not chezmoi_binary.stat.exists | default(false)

- name: Set compatible version based on GLIBC
  ansible.builtin.set_fact:
    # Falls GLIBC < 2.32, verwende eine ältere chezmoi Version (2.32.0 benötigt GLIBC >= 2.28)
    compatible_version: "{% if glibc_version.stdout is version('2.32', '<') %}2.32.0{% else %}{{ chezmoi_version }}{% endif %}"
  when: 
    - chezmoi_install | bool
    - not chezmoi_binary.stat.exists | default(false)
    - glibc_version.stdout is defined

- name: Get latest release version
  ansible.builtin.uri:
    url: https://api.github.com/repos/twpayne/chezmoi/releases/latest
    return_content: true
  register: latest_release
  when: 
    - chezmoi_install | bool
    - not chezmoi_binary.stat.exists | default(false)
    - (compatible_version | default(chezmoi_version)) == "latest"

- name: Set release version
  ansible.builtin.set_fact:
    release_version: >-
      {%- if compatible_version is defined and compatible_version != "latest" -%}
        {{ compatible_version }}
      {%- elif latest_release is defined and latest_release.json is defined -%}
        {{ latest_release.json.tag_name | regex_replace('^v', '') }}
      {%- else -%}
        {{ chezmoi_version }}
      {%- endif -%}
  when: 
    - chezmoi_install | bool
    - not chezmoi_binary.stat.exists | default(false)

- name: Set architecture fact
  ansible.builtin.set_fact:
    deb_architecture: "{% if ansible_architecture == 'x86_64' %}amd64{% elif ansible_architecture == 'aarch64' %}arm64{% else %}{{ ansible_architecture }}{% endif %}"
  when:
    - chezmoi_install | bool
    - not chezmoi_binary.stat.exists | default(false)

- name: Set package filename
  ansible.builtin.set_fact:
    chezmoi_deb_filename: "chezmoi_{{ release_version }}_{{ ansible_system | lower }}_{{ deb_architecture }}.deb"
  when:
    - chezmoi_install | bool
    - not chezmoi_binary.stat.exists | default(false)

- name: Create temporary download directory
  ansible.builtin.file:
    path: "/tmp/chezmoi-install"
    state: directory
    mode: '0755'
  become: true
  when: 
    - chezmoi_install | bool
    - not chezmoi_binary.stat.exists | default(false)

# Download Debian package and verify
- name: Download chezmoi Debian package
  ansible.builtin.get_url:
    url: "{{ chezmoi_base_url }}/download/v{{ release_version }}/{{ chezmoi_deb_filename }}"
    dest: "/tmp/chezmoi-install/{{ chezmoi_deb_filename }}"
  become: true
  when: 
    - chezmoi_install | bool
    - not chezmoi_binary.stat.exists | default(false)

- name: Download checksums file
  ansible.builtin.get_url:
    url: "{{ chezmoi_checksums_url }}"
    dest: "/tmp/chezmoi-install/chezmoi_{{ release_version }}_checksums.txt"
  become: true
  when:
    - chezmoi_install | bool
    - chezmoi_verify_signature | bool
    - not chezmoi_binary.stat.exists | default(false)

- name: Verify package checksum
  ansible.builtin.shell: |
    cd /tmp/chezmoi-install && \
    sha256sum --check chezmoi_{{ release_version }}_checksums.txt --ignore-missing
  register: checksum_verify
  become: true
  failed_when: 
    - checksum_verify.rc != 0
    - "'OK' not in checksum_verify.stdout"
  when:
    - chezmoi_install | bool
    - chezmoi_verify_signature | bool
    - not chezmoi_binary.stat.exists | default(false)

- name: Install chezmoi Debian package
  ansible.builtin.apt:
    deb: "/tmp/chezmoi-install/{{ chezmoi_deb_filename }}"
  become: true
  when:
    - chezmoi_install | bool
    - not chezmoi_binary.stat.exists | default(false)

- name: Clean up download directory
  ansible.builtin.file:
    path: "/tmp/chezmoi-install"
    state: absent
  become: true
  when:
    - chezmoi_install | bool
    - not chezmoi_binary.stat.exists | default(false)

# Stelle sicher, dass .oh-my-zsh korrekte Eigentümerschaft hat
- name: Check if .oh-my-zsh exists
  ansible.builtin.stat:
    path: "/home/{{ chezmoi_user }}/.oh-my-zsh"
  register: oh_my_zsh_dir
  become: true
  when:
    - chezmoi_install | bool
    - chezmoi_apply | bool

- name: Ensure .oh-my-zsh belongs to chezmoi_user
  ansible.builtin.file:
    path: "/home/{{ chezmoi_user }}/.oh-my-zsh"
    state: directory
    owner: "{{ chezmoi_user }}"
    group: "{{ chezmoi_user }}"
    recurse: yes
  become: true
  when:
    - chezmoi_install | bool
    - chezmoi_apply | bool
    - oh_my_zsh_dir.stat.exists | default(false)

# Erstelle das Konfigurationsverzeichnis mit den richtigen Rechten
- name: Ensure chezmoi config directory exists
  ansible.builtin.file:
    path: "{{ chezmoi_config_dir }}"
    state: directory
    owner: "{{ chezmoi_user }}"
    group: "{{ chezmoi_user }}"
    mode: '0755'
  become: true
  when: 
    - chezmoi_install | bool
    - chezmoi_apply | bool

# Verwende das su-Modul, um Befehle als chezmoi_user auszuführen
- name: Initialize chezmoi with user's dotfiles repo
  ansible.builtin.command: "su - {{ chezmoi_user }} -c 'chezmoi init {{ chezmoi_repo }}'"
  become: true
  args:
    creates: "{{ chezmoi_config_dir }}/chezmoi.yaml"
  when:
    - chezmoi_install | bool
    - chezmoi_apply | bool

- name: Apply chezmoi dotfiles
  ansible.builtin.command: "su - {{ chezmoi_user }} -c 'chezmoi apply'"
  become: true
  when:
    - chezmoi_install | bool
    - chezmoi_apply | bool

# Set up cron job for automatic updates
- name: Set up cron job for automatic chezmoi updates
  ansible.builtin.cron:
    name: "Update chezmoi dotfiles"
    user: "{{ chezmoi_user }}"
    hour: "{{ chezmoi_update_hour | default(4) }}"
    minute: "{{ chezmoi_update_minute | default(30) }}"
    job: "{{ chezmoi_bin_path }} update --apply > /dev/null 2>&1"
  become: true
  when:
    - chezmoi_install | bool
    - chezmoi_auto_update | default(true) | bool 